input {
	s3 {
		access_key_id => "__AWS_ACCESS_KEY_ID__"
        secret_access_key => "__AWS_SECRET_ACCESS_KEY__"
		bucket => "cowrie-json-logs"
		prefix => "incoming/"
		type => "cowrie"
		codec => "json"
		region => "us-east-1"
    	backup_to_bucket => "cowrie-json-logs"
		backup_add_prefix => "processed/"
    	delete => false
	}
}

filter {
    # Normalize src_ip to an IP where logstash has added reverse DNS
		ruby {
			code => "src_ip = [event.get('src_ip')].flatten[0]
					event.set('src_ip', src_ip)"
    }
}

output {
  jdbc {
    connection_string => 'jdbc:postgresql://__PG_HOSTNAME__:5432/__PG_DATABASE__'
    username => '__PG_USERNAME__'
    password => '__PG_PASSWORD__'
    statement => [ "INSERT INTO logstash
								(ts,
								session,
								aws_region,
								event_id,
								duration,
								instance_id,
								input,
								outfile,
								cowrie_ip,
								src_ip,
								src_port,
								dst_port,
								size,
								cowrie_kernel_version,
								cowrie_kernel_build,
								cowrie_elf_arch,
								cowrie_hardware_platform,
								protocol,
								cowrie_config)
					VALUES(CAST (? AS timestamp),
									?,
									?,
									?,
									CAST (? AS double precision),
									?,
									?,
									?,
									CAST (? AS inet),
									CAST (? AS inet),
									CAST (? AS int),
									CAST (? AS int),
									CAST (? AS bigint),
									?,
									?,
									?,
									?,
									?,
									?
									)",
								"timestamp",
								"session",
								"aws_region",
								"eventid",
								"duration",
								"instance_id",
								"input",
								"outfile",
								"public_ip",
								"src_ip",
								"src_port",
								"dst_port",
								"size",
								"cowrie_kernel_version",
								"cowrie_kernel_build",
								"cowrie_elf_arch",
								"cowrie_hardware_platform",
								"protocol",
								"cowrie_config"  ]
  }
	if	"ERROR" in [LEVEL]
		{
			stdout { codec => rubydebug }
		}
}
