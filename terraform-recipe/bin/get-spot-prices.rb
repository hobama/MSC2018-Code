#!/usr/bin/env ruby
require 'aws-sdk'
require 'parallel'
require 'erb'
require 'pry'

HOME="/Users/todor/Code/Masters-Thesis-Code/terraform-recipe"

class GetSpotPrices

  attr_reader :client, :regions, :regional_clients, :spot_prices, :timestamp

  def initialize
    @client = Aws::EC2::Client.new
    @regions = client.describe_regions['regions'].map(&:region_name)
    @regional_clients = get_regional_clients
    @spot_prices = {}
  end

  def get_all_prices
    prices = Parallel.map(regions) do |region|
      get_price_for_region(region)
    end
    prices.reject(&:empty?).map do |struct| 
      @spot_prices[struct[0].availability_zone[0..-2]] = struct[0].spot_price
    end
    spot_prices
  end

  def get_price_for_region(region)
    resp = regional_clients[region].describe_spot_price_history(generate_options)
    timestamp = resp.spot_price_history.map(&:timestamp).uniq.sort.first
    resp = regional_clients[region].describe_spot_price_history(generate_options(timestamp))
    resp["spot_price_history"].select { |r| r.timestamp == timestamp }
  end

  def generate_options(timestamp = Time.now - 86400)
    {
      instance_types: [ "t3.nano" ],
      product_descriptions: [ "Linux/UNIX (Amazon VPC)" ],
      start_time: timestamp
    }
  end

  def get_regional_clients
    clients ||= {}
    regions.each do |region|
      clients[region] = Aws::EC2::Client.new(region: region)
    end
    clients
  end

end

cli = GetSpotPrices.new
prices = cli.get_all_prices

terraform_template = <<EOF
/* THIS FILE IS AUTOGENERATED. DO NOT EDIT BY HAND. */
/* SEE get-spot-prices.rb in bin directory */
/* Generated at <%= Time.now %> */

variable "spot_prices" {
  type = "map"

  default = {
    <% prices.map do |region,price| %>
      <%= region %> = <%= price.strip %>
    <% end %>
  }
}

output "spot" {
  value = "${var.spot_prices}"
}
EOF

File.open("#{HOME}/pricing/spot-pricing.tf", "w+") do |f|
  f.write ERB.new(terraform_template).result
end



